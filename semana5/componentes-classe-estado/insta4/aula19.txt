COMPONENTES DE CLASSES 
    Novo tipo de Componente

        Agora vamos ter um novo tipo de Componente. Ele é definido usando classes ao 
        inves de funcoes. Mais codigo, um pouco mais confuso, possui algumas 
        funcionalidades extras!!

CLASSES
    Classe é uma estrutura de dados presente no javascript e em muitas outras 
    linguagens. Não precisamos entender como elas funcionam a fundo agora, 
    apenas como usar elas. O formatinho é sempre o mesmo, só copiar e com o tempo decorar


NOVA SINTAXE

import React from 'react'

export function MeuComponente(){
    return (
        <div>
            <h1>Meu 1 componente!</h1>
            <p>Esse é meu 1 componente</p> 
        </div>
    )
}

---------------------------------------------------------

import React from 'react'

export class MeuComponente extends React.Component{
    render(){
        return(
            <div>
                <h1>Meu 1 componente!</h1>
                <p>Esse é meu 1 componente</p>
            </div>
        )
    }
}

RENDER 

    render() é um metodo da classe, Metodo é o nome dado para toda função 
    declara em um classe. É equivalente a funcao que a antes representava todo o 
    componente funcional. Nao recebe nenhum parametro -> render()

PROPS
    Nao precisam mais ser 'declaradas' em nenhum lugar, a propria classe garante 
    que teremos elas. Acessamos as props usando a sintaxe this.props. De resto, 
    é tudo igual!

NOVA SINTAXE

import React from 'react'

export function MeuComponente(props){
    return(
        <div>
            <h1>Meu 1 componente!</h1>
            <p>Esse é meu 1 componente</p>
            <p>{props.texto}</p>
        </div>
    )
}

------------------------------------------------------------

import React from 'react'

export class MeuComponente extends React.Component {
    render(){
        return(
            <div>
                <h1> Meu 1 componente!</h1>
                <p>Esse é meu 1 componente</p>
                <p>{this.props.texto}</p>
            </div>
        )
    }
}

FUNÇOES DE EVENTO - FUNCIONAL
    Antes, qualquer funçao extra necessaria era declarada no corpo da funcao

import React from 'react'

export function MeuComponente(props){
    const onClickBotao = () => {
        console.log('Clicou!')
    }

    return <div>
            <h1>Meu primeiro componente!</h1>
            <p>Este é o meu primeiro componente React</p>
            <p>{props.texto}</p>
            <button onClick={onClickBotao}>Clique!</button>
    </div>
}

FUNÇOES DE EVENTO - CLASSES
    Agora, devemos declarar no escopo da classe ('ao lado' do metodo render). 
    Nenhuma keyword (Como const ou function) é necessaria. Para referencia-la, 
    precisamos usar keyword this

import React from 'react'

export class MeuComponente extends React.Component{
    onClickBotao = () => {
        console.log('Clicou!')
    }

    render(){
        return <div>
                <h1>Meu primeiro componente!</h1>
                <p>Este é o meu primeiro componente React</p>
                <button onClick={this.onClickBotao}>Clique!</button>
        </div>
    }
}

MOTIVAÇÃO
    Já vimos como criar componentes em React, podemos passar propriedades (props) 
    para eles de froma que possam ser reutilizados em diferentes lugares com 
    valores diferentes. Mas, por hora, eles são completamente estáticos! Ou seja, 
    não conseguimos mudar o que esta na tela.


SOLUÇÃO: ESTADOS!
    Conceito muito importante do React, objeto que guarda propriedades que mudam com o 
    tempo. Reativo => React atualiza a tela quando alguma das propriedades muda.

ESTUDO DE CASO: CONTADOR
    Para entender estado, vamos ver a implementação de um contador em React. 
    Dois botoes: soma e subtrai. Numero que mostra o valor do contador!

import React from 'react';

export class Contador extends React.Component{
    render(){
        return (
            <div>
                <p>0</p>
                <button>Subtrai</button>
                <button>Soma</button>
            </div>
        )
    }
}


DECLARANDO UM ESTADOS
    Um estado pode ser declarado com uma variavel chamada state na classe, ela deve ser 
    um objeto, guarda os dados que mudam na tela, Valroes passados na declaracao 
    representam o estado inical!

import React from 'react';

export class Contador extends React.Component{
    state = {
        valorContador:0
    }

    render(){
        return (
            <div>
                <p>0</p>
                <button>Subtrai</button>
                <button>Soma</button>
            </div>
        );
    }
}

LENDO UM ESTADO
    Podemos ler o estado da mesma froma que lemos as props: this.state. Ele é um objeto com 
    todos as propriedades que foram declaradas. Inicialmente, terá o valor que foi definido 
    na classe!

import React from 'react';

export class Contador extends React.Component{
    state = {
        valorContador:0
    }

    render(){
        return (
            <div>
                <p>{this.state.valorContador}</p> ------> Inicialmente: 0
                <button>Subtrai</button>
                <button>Soma</button>
            </div>
        );
    }
}

ATUALIZANDO UM ESTADO
    Não podemos alterar o estado diretamnete. Exemplo errado: this.state.contador = 10. 
    É preciso fazer isso por meio de uma funcao especial: this.setState(), Essa funcao 
    recebe um objeto com as propriedades que serao atualizadas e seus novos valores!

    O componente é atualizado imediatamente, this.state passa a  ter o novo valor 
    definido. Interface reflete atualizacao => metodo render(), que é quem cuida do 
    nosso layout, roda novamente. Assim sendo, o render() roda de novo toda vez que um 
    estado é atualizado, de maneira otimizada.

import React from 'react';

export class Contador extends React.Component{
    state = {
        valorContador:0
    }

    onClickSoma = () => {
        const valorAtaul = this.state.valorContador
        const proximoValor = valorAtual + 1

        this.setState({valorContador: proximoValor})
    }

    onClickSubtrai = () => {
        this.setState({valorContador: this.state.valorContador - 1})
    }
    render(){
        return (
            <div>
                <p>{this.state.valorContador}</p> ------> Inicialmente: 0
                <button>Subtrai</button>
                <button>Soma</button>
            </div>
        );
    }
}

LIDANDO COM INPUTS 
    Poedemos dizer que o input do HTML possui um estado proprio. Para trabalhar com ele 
    corretamente no React, queremos que o nosso componente controle o estado do input. 
    Essa tecnica é chamada de inputs controlados!

CONTROLANDO O INPUT 
    Cada input sera representado pro uma propriedade do estado de classe. Essa 
    propriedade define o valor do input, toda vez que o input muda, o etsadp deve ser 
    atualizado. Isso é feito atraves do atributo onChange

FUNÇÃO ONCHANGE
    A funcao que passamos para o onChange recebe um event como parametro. O event possui 
    o valor do input dentro de event.target.value. Pegamos esse valor e colocamos na 
    propriedade do estado referente aquele input


import React from 'react';

export class Contador extends React.Component{
    state = {
        valorNome:'',
        valorEmail: ''
    }

    onChangeNome = (event) => {
        this.setState({valorNome: event.target.value})

        this.setState({valorContador: proximoValor})
    }

    onChangeEmail = (event) => {
        this.setState({valorEmail: event.target.value})

        this.setState({valorContador: proximoValor})
    }

    
    render(){
        return (
            <div>
               <input name={'nome'} onChange={this.onChangeNome} value={this.state.valorNome}/>
               <input name={'email'} onChange={this.onChangeEmail} value={this.state.valorEmail}/>
            </div>
        );
    }
}