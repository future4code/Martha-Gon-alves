Componentes sao blocos de codigo reutilizaveis. Agora essses blocos sao um peda√ßo de interface, "gerando"o html que aparece na pagina!!
Entrada props -> saida JSX 

O QUE DEVE SER UM COMPONENTE 

N√£o existe uma regra de quando criar um componentizar uma parte da tela 

Devemos considerar criar um componente quando: layout repetido, codigo muito grande e/ou confuso, queremos dar um nome significativo √° uma parte da interface


    COMPONENTE EM REACT 

Na pratica componentes em react sao funcoes (por enquanto) com algumas regras especificas: Primeira letra do nome maiscula, deve retornar um JSX (com um unico pai)

    USANDO UM  COMPONENTE
Para colocar o componente na tela, chamamos ele em um componente pai, dentro do JSX. 
Lembrando que o componente App.js √© criado por padrao quando criamos um app react.  
Quando colocamos um componente A dentro de um componente B, falamos que o componente 
A √© filho do componente B!

Para chamar o componente, usamos uma sintaxe semelhante √† do html, nome deve ser mantido, com a letra maiucsula. 

    Self-Closing Tag 

Quando um componente nao possui nada entre a abertura e o fechamento de sua tag, √© preferivel que use a sintaxr Self-closing.

    Separando em Arquivos üóÇ

√â permitido ter mais de um componente em um mesmo arquivo (afinal, eles s√£o s√≥ 
funcoes). No entanto, √© uma ba pratica criar um arquivo por componente. 
Podemos comunicar os arquivos por meio de imports e exports! 

O arquivo deve ter o mesmo nome de componente que ele guarda. A organizacao de 
pastas √© livre, mas recomenda-se a criacao de uma pasta chamada componentes, 
que guarde todos os componentes criados. Essa pasta pode ter subpastas, 
de acordo com o que fizer mais sentido para cada um. 

    Criando um Componente Separado ‚≠ê

Todo o arquivo que possui um componente deve importar o react no topo. Devemos exportar o componente (antes do nome)

    Usando um Componente Separado ‚≠ê

Precisamos importa-lo no arquivo onde o usamos e fazemos isso por meio da palavra import. Atencao para as chaves em volta do componente!!!!

    COMPONENTES - PROPS 

Ja vimos que componentes s√£o funcoes que renderizam html na tela. Entrada = props, saida = JSX. Frequentemente, vamos querer que o que sai na tela dependa de alguma infroma√ßao

    PROPS

Componentes pais podem passar propriedades para os componentes filhos. Chamamod essas propriedades de props, elas podem assumir qualquer tipo de valor que vimos em javascript: Strings, numeros, arrays, objetos, funcoes, componentes, etc..

    PASSANDO PROPS

A sintaxe √© a mesma dos atributos  HTML , damos um nome arbitrario, passamos o valor entre {chaves}
